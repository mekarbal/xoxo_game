[{"D:\\React_Projects\\xo_game\\src\\index.js":"1","D:\\React_Projects\\xo_game\\src\\reportWebVitals.js":"2","D:\\React_Projects\\xo_game\\src\\Game.js":"3"},{"size":503,"mtime":1608818033797,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":499162500000,"results":"6","hashOfConfig":"5"},{"size":2005,"mtime":1608825231916,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1bwkzns",{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"12","messages":"13","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"D:\\React_Projects\\xo_game\\src\\index.js",[],"D:\\React_Projects\\xo_game\\src\\reportWebVitals.js",[],"D:\\React_Projects\\xo_game\\src\\Game.js",["15","16"],"import \"./index.css\";\nimport { useState } from \"react\";\n\nconst Square = (props) => {\n  return (\n    <button className=\"square\" onClick={props.onClickEvent}>\n      {props.value}\n    </button>\n  );\n};\n\nconst winnerCalculate = (squares) => {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n\n  for (let line of lines) {\n    const [a, b, c] = line;\n    if (squares[a] && squares[a] == squares[b] && squares[b] == squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n};\n\nconst Board = () => {\n  const intialSquares = Array(9).fill(null);\n\n  const [squares, setSquares] = useState(intialSquares);\n  const winner = winnerCalculate(squares);\n  const [xIsNext, setXIsNext] = useState(true);\n  const handleClickEvent = (i) => {\n    const newSquares = [...squares];\n    newSquares[i] = xIsNext ? \"X\" : \"O\";\n    setSquares(newSquares);\n    setXIsNext(!xIsNext);\n  };\n\n  const renderSquare = (i) => {\n    return (\n      <Square value={squares[i]} onClickEvent={() => handleClickEvent(i)} />\n    );\n  };\n\n  const status = winner\n    ? `Winner : ${winner}`\n    : `Next Player ${xIsNext ? \"X\" : \"O\"}`;\n\n  return (\n    <div className=\"App\" style={gameStyles.boardColor}>\n      {status}\n      <div className=\"board-row\">\n        {renderSquare(0)}\n        {renderSquare(1)}\n        {renderSquare(2)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(3)}\n        {renderSquare(4)}\n        {renderSquare(5)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(6)}\n        {renderSquare(7)}\n        {renderSquare(8)}\n      </div>\n    </div>\n  );\n};\n\nfunction Game() {\n  return (\n    <div className=\"game\">\n      <Board />\n    </div>\n  );\n}\n\nexport default Game;\n\nconst gameStyles = {\n  backgroundColor: \"salmon\",\n  margin: 10,\n  padding: 20,\n  boardColor: {\n    backgroundColor: \"skyblue\",\n    margin: 10,\n    padding: 20,\n    justifyContent: \"center\",\n    textAlign: \"center\",\n  },\n};\n",{"ruleId":"17","severity":1,"message":"18","line":26,"column":34,"nodeType":"19","messageId":"20","endLine":26,"endColumn":36},{"ruleId":"17","severity":1,"message":"18","line":26,"column":62,"nodeType":"19","messageId":"20","endLine":26,"endColumn":64},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]